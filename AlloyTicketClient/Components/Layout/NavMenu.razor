@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.OpenIdConnect
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@using Microsoft.AspNetCore.Components.Authorization

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Request Center</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-sidebar d-flex flex-column">
    <div class="nav-scrollable flex-fill overflow-auto" onclick="document.querySelector('.navbar-toggler').click()">
        <nav class="flex-column">
            @if (dynamicPages != null)
            {
                foreach (var dp in dynamicPages)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="@(Navigation.BaseUri + $"request?type={Uri.EscapeDataString(dp.HeaderText)}")">
                            @dp.HeaderText
                        </NavLink>
                    </div>
                }
            }

            <AuthorizeView Roles="Admin">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@(Navigation.BaseUri + "rules")">
                        Rules 
                    </NavLink>
                </div>
            </AuthorizeView>
        </nav>
    </div>
    <div class="nav-logout-section">
        <AuthorizeView>
            <div class="nav-item px-3">
                <button class="nav-link btn btn-link" @onclick="Logout">Logout</button>
            </div>
        </AuthorizeView>
    </div>
</div>

@code {
    private List<DynamicPageConfig> dynamicPages = new();
    protected override void OnInitialized()
    {
        dynamicPages = Configuration.GetSection("DynamicPages").Get<List<DynamicPageConfig>>() ?? new();
    }
    private void Logout()
    {
        var returnUrl = Uri.EscapeDataString(Navigation.Uri);
        Navigation.NavigateTo($"{Navigation.BaseUri}Account/Logout?returnUrl={returnUrl}", true);
    }
    public class DynamicPageConfig
    {
        public string HeaderText { get; set; } = string.Empty;
        public string Subtext { get; set; } = string.Empty;
        public List<DynamicButtonConfig> Buttons { get; set; } = new();
    }
    public class DynamicButtonConfig
    {
        public string FormId { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string ObjectId { get; set; } = string.Empty;
    }
}