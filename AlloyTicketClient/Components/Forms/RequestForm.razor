@using System.Collections.Generic
@using AlloyTicketClient.Components.Fields
@using AlloyTicketClient.Models
@using AlloyTicketClient.Enums
@using AlloyTicketClient.Services
@using Newtonsoft.Json
@using System.Text.Json
@inject FormFieldService formFieldService
@inject AlloyApiService AlloyApiService
@inject RulesService RulesService
@inject AttachmentService AttachmentService
@inject IJSRuntime JSRuntime

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public RequestActionPayload? Payload { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private bool isLoading = false;
    private List<PageDto>? pages;
    private Dictionary<string, object?> fieldValues = new();
    private Dictionary<string, Guid> attachmentInputKeys = new();
    private Guid? lastLoadedFormId = null;
    private bool isSubmitting = false;
    private bool showCancelConfirm = false;
    private bool closeSidebarOnConfirm = false;
    private RuleEvaluationResult? ruleResult;
    private List<string> modifyAppsTriggerFields = new();

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        try
        {
            if (!string.IsNullOrWhiteSpace(Payload?.ObjectId))
            {
                Payload.FormId = await formFieldService.GetFormId(Payload.ObjectId);
            }

            if (Show && Payload != null && Payload.FormId != Guid.Empty)
            {
                if (Payload.Data.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    try
                    {
                        var dict = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object?>>(Payload.Data.GetRawText());
                        if (dict != null)
                            fieldValues = dict;
                    }
                    catch { }
                }
                if (lastLoadedFormId != Payload.FormId || pages == null)
                {
                    pages = null;
                    pages = await formFieldService.GetFormPagesAsync(Payload.FormId);
                    lastLoadedFormId = Payload.FormId;
                   
                    var rules = await RulesService.GetRulesForFormAsync(Payload.FormId);
                    modifyAppsTriggerFields = rules
                        .Where(r => r.Action == FilterAction.ModifyApps)
                        .Select(r => r.TriggerField)
                        .Where(x => !string.IsNullOrWhiteSpace(x))
                        .ToList();

                    await RulesService.EvaluateRulesAsync(Payload.FormId, pages, fieldValues, null);
                    StateHasChanged();
                }
            }
            else if (!Show)
            {
                fieldValues.Clear();
                pages = null;
                lastLoadedFormId = null;
                ruleResult = null;
                modifyAppsTriggerFields = new();
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SubmitForm()
    {
        isSubmitting = true;
        StateHasChanged();
        try
        {
            if (Payload != null)
            {
                FormDataMapperService.SetDefaultsForHiddenRequiredFields(pages, fieldValues);

                // Get all fields with types
                var namedKeys = FormDataMapperService.MapFieldValuesToNameKeyed(pages, fieldValues);

                // Serialize and set main payload
                var json = System.Text.Json.JsonSerializer.Serialize(namedKeys);
                JsonDocument doc = JsonDocument.Parse(json);
                Payload.Data = doc.RootElement;

                // Call main API
                var (success, message) = await AlloyApiService.PostAsync(Payload);

                await JSRuntime.InvokeVoidAsync("alert", $"API call result: {message}");
            }
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task OnFieldValueChanged(object? value, string fieldKey)
    {
        fieldValues[fieldKey] = value;
        if (Payload != null && pages != null)
        {
            await RulesService.EvaluateModifyAppsRulesAsync(Payload.FormId, fieldValues, fieldKey);
            var rules = await RulesService.GetRulesForFormAsync(Payload.FormId);
            await RulesService.EvaluateRulesAsync(Payload.FormId, pages, fieldValues, fieldKey);
            StateHasChanged();
        }
    }

    private void ClearAttachment(string key)
    {
        fieldValues.Remove(key);
        attachmentInputKeys[key] = Guid.NewGuid(); // force InputFile to re-render
        StateHasChanged();
    }

    private void HandleOverlayClick()
    {
        if (fieldValues.Count > 0)
        {
            showCancelConfirm = true;
            closeSidebarOnConfirm = true;
        }
        else
        {
            fieldValues.Clear();
            if (OnClose.HasDelegate)
                OnClose.InvokeAsync();
        }
    }

    private void ConfirmCancel()
    {
        showCancelConfirm = false;
        if (closeSidebarOnConfirm)
        {
            fieldValues.Clear();
            if (OnClose.HasDelegate)
                OnClose.InvokeAsync();
        }
    }

    private void CancelCancel()
    {
        showCancelConfirm = false;
        closeSidebarOnConfirm = false;
    }

    private async Task HandleClose()
    {
        if (fieldValues.Count > 0)
        {
            showCancelConfirm = true;
            closeSidebarOnConfirm = true;
        }
        else
        {
            fieldValues.Clear();
            if (OnClose.HasDelegate)
                await OnClose.InvokeAsync();
        }
    }

    private List<List<IPageItem>> GetFieldRows(List<IPageItem> items)
    {
        var rows = new List<List<IPageItem>>();
        var currentRow = new List<IPageItem>();
        foreach (var item in items)
        {
            if (
                (item is FieldInputDto fieldInput && (fieldInput.FieldType == FieldType.Memo || (fieldInput.DefinitionID != null && modifyAppsTriggerFields.Contains(fieldInput.DefinitionID.ToString()))))
                || item is FieldTextDto
            )
            {
                if (currentRow.Count > 0)
                {
                    rows.Add(new List<IPageItem>(currentRow));
                    currentRow.Clear();
                }
                rows.Add(new List<IPageItem> { item });
            }
            else
            {
                currentRow.Add(item);
                if (currentRow.Count == 2)
                {
                    rows.Add(new List<IPageItem>(currentRow));
                    currentRow.Clear();
                }
            }
        }
        if (currentRow.Count > 0)
            rows.Add(currentRow);
        return rows;
    }

    private bool RowNeedsFullWidth(List<IPageItem> row)
    {
        if (row.Count == 1 && row[0] is FieldInputDto fieldInput)
        {
            var mapped = FormDataMapperService.MapToFormFieldDto(fieldInput);
            if (mapped.FieldType == FieldType.Input && !string.IsNullOrWhiteSpace(mapped.LookupValues))
            {
                var (lookupType, options) = ParseLookupTypeAndValues(mapped.LookupValues);
                if (lookupType == 1 && options.Count > 2)
                    return true;
            }
        }
        return false;
    }

    private (int lookupType, List<string> options) ParseLookupTypeAndValues(string lookupValues)
    {
        var parts = lookupValues.Split(',', 2);
        if (parts.Length < 2 || !int.TryParse(parts[0], out var type))
        {
            return (2, lookupValues.Split(',', System.StringSplitOptions.RemoveEmptyEntries | System.StringSplitOptions.TrimEntries).ToList());
        }
        var rest = parts[1];
        var options = new List<string>();
        var quoteStart = rest.IndexOf('"');
        var quoteEnd = rest.LastIndexOf('"');
        if (quoteStart >= 0 && quoteEnd > quoteStart)
        {
            var quoted = rest.Substring(quoteStart + 1, quoteEnd - quoteStart - 1);
            options = quoted.Split(',', System.StringSplitOptions.RemoveEmptyEntries | System.StringSplitOptions.TrimEntries)
                .Select(x => x.Replace("\"", string.Empty)).ToList();
        }
        else
        {
            options = rest.Split(',', System.StringSplitOptions.RemoveEmptyEntries | System.StringSplitOptions.TrimEntries)
                .Select(x => x.Replace("\"", string.Empty)).ToList();
        }
        return (type, options.Distinct().ToList());
    }
}

@if (Show)
{
    <div class="modal-overlay" @onclick="HandleOverlayClick">
        <div class="modal-dialog" @onclick:stopPropagation>
            <div class="modal-header modal-header-flex">
                <h2>@Title</h2>
                <button class="modal-close" @onclick="HandleClose">&times;</button>
            </div>
            <div class="modal-content modal-content-flex">
                @if (isLoading)
                {
                    <div class="modern-loading">
                        <div class="modern-spinner"></div>
                        <span>Loading, please wait...</span>
                    </div>
                }
                else if (pages != null && pages.Count > 0)
                {
                    <EditForm Model="fieldValues" OnValidSubmit="SubmitForm" class="edit-form-flex" style="height: 100%">
                        <DataAnnotationsValidator />
                        <div class="field-content field-content-scroll">
                            @foreach (var p in pages.Where(pg => !pg.IsHidden))
                            {
                                <div class="form-page">
                                    <h3>@p.PageName</h3>
                                    @foreach (var row in GetFieldRows(p.Items.Where(i => !(i is FieldInputDto fi && fi.FieldName == "Requester_Id")).ToList()))
                                    {
                                        var isFullWidthRow =
                                        (row.Count == 1 && row[0] is FieldInputDto fieldInputDto && fieldInputDto.FieldType == FieldType.Memo)
                                        || (row.Count == 1 && row[0] is FieldTextDto)
                                        || RowNeedsFullWidth(row);
                                        var isSingleInputRow = row.Count == 1 && row[0] is FieldInputDto singleInput && singleInput.FieldType != FieldType.Memo;
                                        <div class="form-row@(isFullWidthRow ? " full-width-row" : "")">
                                            @foreach (var item in row)
                                            {
                                                if (item is FieldInputDto fieldInput)
                                                {
                                                    var fieldKey = fieldInput.DefinitionID?.ToString();
                                                    if (!fieldInput.IsHidden)
                                                    {
                                                        var isTextarea = fieldInput.FieldType == FieldType.Memo;
                                                        var formColClass = "form-col" + (isTextarea ? " textarea-col" : "") + (isSingleInputRow ? " single-col" : "");
                                                        <div class="@formColClass">
                                                            <FieldInput @key="fieldInput.DefinitionID"
                                                                        Field="@(FormDataMapperService.MapToFormFieldDto(fieldInput))"
                                                                        Value="@(fieldValues.ContainsKey(fieldKey) ? fieldValues[fieldKey]?.ToString() : null)"
                                                                        OnValueChanged="@(val => OnFieldValueChanged(val, fieldKey))" />
                                                        </div>
                                                    }
                                                }
                                                else if (item is FieldTextDto fieldText)
                                                {
                                                    <div class="form-col field-text">
                                                        <h4>
                                                            @if (fieldText.Config != null && !string.IsNullOrWhiteSpace(fieldText.Config.Url))
                                                            {
                                                                <a href="@fieldText.Config.Url" target="_blank" rel="noopener noreferrer">@fieldText.Config.Text</a>
                                                            }
                                                            else if (fieldText.Config != null)
                                                            {
                                                                @fieldText.Config.Text
                                                            }
                                                            else
                                                            {
                                                                @FormDataMapperService.GetTextValue(fieldText.ElementDefinition)
                                                            }
                                                        </h4>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="modal-footer modal-footer-fixed">
                            <button class="btn btn-primary" type="submit" style="min-width: 100px; display: flex; align-items: center; justify-content: center; gap: 0.5rem;" disabled="@(isSubmitting)">
                                @if (isSubmitting)
                                {
                                    <span>Submitting</span>
                                    <span class="modern-spinner" style="width: 1.25rem; height: 1.25rem; border-width: 2.5px;"></span>
                                }
                                else
                                {
                                    <span>Submit</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                }
                else if (!isLoading)
                {
                    <div class="no-fields-message">
                        <span>No fields found for this form.</span>
                    </div>
                }
            </div>
        </div>
    </div>
}
@if (showCancelConfirm)
{
    <CancelConfirmModal OnConfirm="ConfirmCancel" OnCancel="CancelCancel" />
}