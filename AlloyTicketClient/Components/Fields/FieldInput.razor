@using AlloyTicketClient.Enums
@using AlloyTicketClient
@using Microsoft.AspNetCore.Components

@inject FormFieldService FormFieldService

@if (Field != null)
{
    <div class="field-block">
        <h4>
            @GetDisplayName(Field)
            @if (Field.Mandatory == true)
            {
                <span class="required" title="Required">*</span>
            }
        </h4>
        @if (Field.FieldType == FieldType.Input && !string.IsNullOrWhiteSpace(Field.LookupValues))
        {
            var options = ParseLookupValues(Field.LookupValues);
            <select class="form-control" @bind="CurrentValue">
                <option value="">-- Select --</option>
                @foreach (var option in options)
                {
                    <option value="@option">@option</option>
                }
            </select>
        }
        else if (Field.FieldType == FieldType.Input)
        {
            <input type="text" class="form-control" @bind="CurrentValue" @bind:event="oninput" />
        }
        else if (Field.FieldType == FieldType.Checkbox)
        {
            <input type="checkbox" class="form-check-input" @bind="IsChecked" />
        }
        else if (Field.FieldType == FieldType.Memo)
        {
            <textarea class="form-control" @bind="CurrentValue"></textarea>
        }
        else if (Field.FieldType == FieldType.MultiSelect && !string.IsNullOrWhiteSpace(Field.LookupValues))
        {
            var options = ParseLookupValues(Field.LookupValues);
            <select class="form-control" multiple @onchange="OnMultiSelectChanged">
                @foreach (var option in options)
                {
                    <option value="@option" selected="@(SelectedMultiValues.Contains(option))">@option</option>
                }
            </select>
        }
        else if (Field.FieldType == FieldType.Dropdown && !string.IsNullOrWhiteSpace(Field.TableName) && !string.IsNullOrWhiteSpace(Field.DisplayFields))
        {
            if (Options == null)
            {
                <span>Loading...</span>
            }
            else
            {
                <select class="form-control" @onchange="OnDropdownChanged">
                    <option value="">-- Select --</option>
                    @foreach (var option in Options)
                    {
                        var value = option.Properties.ContainsKey("Id") ? option.Properties["Id"]?.ToString() : option.Properties.Values.FirstOrDefault()?.ToString();
                        var display = option.Properties.ContainsKey("Display_Name") ? option.Properties["Display_Name"]?.ToString() : option.Properties.Values.FirstOrDefault()?.ToString();
                        <option value="@value">@display</option>
                    }
                </select>
            }
        }
        else if (Field.FieldType == FieldType.Dropdown && Options != null)
        {
            <select class="form-control" @onchange="OnDropdownChanged">
                <option value="">-- Select --</option>
                @foreach (var option in Options)
                {
                    var value = option.Properties.ContainsKey("Id") ? option.Properties["Id"]?.ToString() : option.Properties.Values.FirstOrDefault()?.ToString();
                    var display = option.Properties.ContainsKey("Display_Name") ? option.Properties["Display_Name"]?.ToString() : option.Properties.Values.FirstOrDefault()?.ToString();
                    <option value="@value">@display</option>
                }
            </select>
        }
        else if (Field.FieldType == FieldType.Dropdown || (Field.Field_Name?.Equals("Requester_Id", StringComparison.OrdinalIgnoreCase) ?? false))
        {
            <select class="form-control" @bind="CurrentValue">
                <option value="">-- Select --</option>
                <!-- TODO: Populate with actual Requester options -->
            </select>
        }
        else if (Field.Field_Name?.Equals("Due_date", StringComparison.OrdinalIgnoreCase) ?? false)
        {
            <input type="date" class="form-control" @bind="DateValue" />
        }
        else
        {
            <input type="text" class="form-control" @bind="CurrentValue" @bind:event="oninput" />
        }
    </div>
}

@code {
    [Parameter] public FormFieldDto? Field { get; set; }
    [Parameter] public object? Value { get; set; } // Now supports DropdownOptionDto
    [Parameter] public EventCallback<object?> OnValueChanged { get; set; }

    private List<DropdownOptionDto>? Options;

    // For MultiSelect
    private List<string> SelectedMultiValues
    {
        get
        {
            if (Value is List<string> list)
                return list;
            if (Value is string s && !string.IsNullOrWhiteSpace(s))
                return s.Split(';').Select(x => x.Trim()).Where(x => !string.IsNullOrEmpty(x)).ToList();
            return new List<string>();
        }
        set
        {
            if (!Equals(Value, value))
            {
                Value = value;
                OnValueChanged.InvokeAsync(value);
            }
        }
    }

    private void OnMultiSelectChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            var selected = new List<string>();
            if (e.Value is string single)
            {
                selected.Add(single);
            }
            else if (e.Value is IEnumerable<string> many)
            {
                selected.AddRange(many);
            }
            else if (e.Value is ChangeEventArgs ce && ce.Value is IEnumerable<string> ceMany)
            {
                selected.AddRange(ceMany);
            }
            else if (e.Value is System.Collections.Specialized.StringCollection sc)
            {
                foreach (var s in sc)
                    selected.Add(s);
            }
            else if (e.Value is string[] arr)
            {
                selected.AddRange(arr);
            }
            else if (e.Value is IEnumerable<object> objArr)
            {
                selected.AddRange(objArr.Select(x => x?.ToString() ?? ""));
            }
            SelectedMultiValues = selected;
        }
        else
        {
            SelectedMultiValues = new List<string>();
        }
    }

    private string? CurrentValue
    {
        get => Value is DropdownOptionDto dto ? dto.Properties.ContainsKey("Id") ? dto.Properties["Id"]?.ToString() : dto.Properties.Values.FirstOrDefault()?.ToString() : Value?.ToString();
        set
        {
            if (Field?.FieldType == FieldType.Dropdown && Options != null)
            {
                var selected = Options.FirstOrDefault(o => (o.Properties.ContainsKey("Id") ? o.Properties["Id"]?.ToString() : o.Properties.Values.FirstOrDefault()?.ToString()) == value);
                if (selected != null && !Equals(Value, selected))
                {
                    Value = selected;
                    OnValueChanged.InvokeAsync(selected);
                }
                else if (string.IsNullOrEmpty(value))
                {
                    Value = null;
                    OnValueChanged.InvokeAsync(null);
                }
            }
            else
            {
                if (!Equals(Value, value))
                {
                    Value = value;
                    OnValueChanged.InvokeAsync(value);
                }
            }
        }
    }

    private void OnDropdownChanged(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        if (Options != null)
        {
            var selected = Options.FirstOrDefault(o => (o.Properties.ContainsKey("Id") ? o.Properties["Id"]?.ToString() : o.Properties.Values.FirstOrDefault()?.ToString()) == selectedValue);
            Value = selected;
            OnValueChanged.InvokeAsync(selected);
        }
    }

    private bool IsChecked
    {
        get => Value?.ToString() == "true" || Value?.ToString() == "True";
        set
        {
            var strValue = value ? "true" : "false";
            if (!Equals(Value, strValue))
            {
                Value = strValue;
                OnValueChanged.InvokeAsync(strValue);
            }
        }
    }

    private DateTime? DateValue
    {
        get
        {
            if (DateTime.TryParse(Value?.ToString(), out var dt))
                return dt;
            return null;
        }
        set
        {
            var strValue = value.HasValue ? value.Value.ToString("yyyy-MM-dd") : null;
            if (!Equals(Value, strValue))
            {
                Value = strValue;
                OnValueChanged.InvokeAsync(strValue);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDropdownOptions();
    }

    private async Task LoadDropdownOptions()
    {
        if (Field?.FieldType == FieldType.Dropdown && !string.IsNullOrWhiteSpace(Field.TableName) && !string.IsNullOrWhiteSpace(Field.DisplayFields))
        {
            Options = await FormFieldService.GetDropdownOptionsAsync(Field);
            StateHasChanged();
        }
        else
        {
            Options = null;
        }
    }

    private string GetDisplayName(FormFieldDto field)
    {
        // Always use Field_Label as the display name if present, otherwise fallback to Field_Name
        return string.IsNullOrWhiteSpace(field.Field_Label) ? field.Field_Name ?? string.Empty : field.Field_Label;
    }

    private IEnumerable<string> ParseLookupValues(string lookupValues)
    {
        // If the value contains a comma and a quote, extract the quoted part
        if (lookupValues.Contains('"'))
        {
            var quoteStart = lookupValues.IndexOf('"');
            var quoteEnd = lookupValues.LastIndexOf('"');
            if (quoteStart >= 0 && quoteEnd > quoteStart)
            {
                var quoted = lookupValues.Substring(quoteStart + 1, quoteEnd - quoteStart - 1);
                return quoted.Split(',', System.StringSplitOptions.RemoveEmptyEntries | System.StringSplitOptions.TrimEntries)
                    .Select(x => x.Replace("\"", string.Empty));
            }
        }
        // Otherwise, treat as a simple CSV
        return lookupValues.Split(',', System.StringSplitOptions.RemoveEmptyEntries | System.StringSplitOptions.TrimEntries)
            .Select(x => x.Replace("\"", string.Empty));
    }
}
