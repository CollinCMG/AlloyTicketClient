@using AlloyTicketClient.Enums
@using AlloyTicketClient.Services
@using Microsoft.AspNetCore.Components

@if (Field == null || Field.Field_Name == "Requester_ID")
{
    // Do not render anything for Requester_ID
}
else
{
    <div class="field-block@((Field.FieldType == FieldType.Memo || Field.FieldType == FieldType.Description) ? " full-width" : "")">
        <h4>
            @GetDisplayName(Field)
            <span class="required" title="Required">
                @(Field.Mandatory == true ? "*" : "\u00A0")
            </span>
        </h4>
        @* Input with LookupValues: radio or select *@
        @if (Field.FieldType == FieldType.Input && !string.IsNullOrWhiteSpace(Field.LookupValues))
        {
            var (lookupType, options) = ParseLookupTypeAndValues(Field.LookupValues);
            if (lookupType == 1)
            {
                var radioGroupClass = $"radio-group-inline{(options.Count > 2 ? " full-width-row" : string.Empty)}";
                <div class="@radioGroupClass">
                    @foreach (var option in options)
                    {
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="@Field.Field_Name" value="@option" checked="@(CurrentValue == option)" @onchange="() => OnRadioChanged(option)" disabled="@(Field.Read_Only == true)" @attributes="GetRequiredAttribute()" />
                            <label class="form-check-label">@option</label>
                        </div>
                    }
                </div>
            }
            else
            {
                <select class="form-control" @bind="CurrentValue" required="@(Field.Mandatory == true)" disabled="@(Field.Read_Only == true)">
                    <option value="">-- Select --</option>
                    @foreach (var option in options)
                    {
                        <option value="@option">@option</option>
                    }
                </select>
            }
        }
        @* Plain text input *@
        else if (Field.FieldType == FieldType.Input)
        {
            <input type="text" class="form-control" @bind="CurrentValue" @bind:event="oninput" required="@(Field.Mandatory == true)" disabled="@(Field.Read_Only == true)" />
        }
        @* Checkbox *@
        else if (Field.FieldType == FieldType.Checkbox)
        {
            <input type="checkbox" class="form-check-input" @bind="IsChecked" disabled="@(Field.Read_Only == true)" />
        }
        @* Memo (textarea) *@
        else if (Field.FieldType == FieldType.Memo || Field.FieldType == FieldType.Description)
        {
            <textarea class="form-control full-row" @bind="CurrentValue" required="@(Field.Mandatory == true)" disabled="@(Field.Read_Only == true)"></textarea>
        }
        @* MultiSelect *@
        else if (Field.FieldType == FieldType.MultiSelect && !string.IsNullOrWhiteSpace(Field.LookupValues))
        {
            var multiOptions = FormDataMapperService.ParseLookupValues(Field.LookupValues).Distinct();
            <select class="form-control" multiple @onchange="OnMultiSelectChanged" required="@(Field.Mandatory == true)" disabled="@(Field.Read_Only == true)">
                @foreach (var option in multiOptions)
                {
                    <option value="@option" selected="@SelectedMultiValues.Contains(option)">@option</option>
                }
            </select>
        }
        @* Dropdown with async options *@
        else if (Field.FieldType == FieldType.Dropdown && !string.IsNullOrWhiteSpace(Field.TableName) && !string.IsNullOrWhiteSpace(Field.DisplayFields))
        {
            if (Options == null)
            {
                <span>Loading...</span>
            }
            else
            {
                <select class="form-control" @onchange="OnDropdownChanged" required="@(Field.Mandatory == true)" disabled="@(Field.Read_Only == true)">
                    <option value="">-- Select --</option>
                    @foreach (var option in Options)
                    {
                        var (value, display) = GetDropdownValueAndDisplay(option);
                        <option value="@value">@display</option>
                    }
                </select>
            }
        }
        @* Dropdown with static options *@
        else if (Field.FieldType == FieldType.Dropdown && Options != null)
        {
            <select class="form-control" @onchange="OnDropdownChanged" required="@(Field.Mandatory == true)" disabled="@(Field.Read_Only == true)">
                @foreach (var option in Options)
                {
                    var (value, display) = GetDropdownValueAndDisplay(option);
                    <option value="@value">@display</option>
                }
            </select>
        }
        @* Date input *@
        else if (Field.FieldType == FieldType.Date)
        {
            <input type="date" class="form-control" @bind="DateValue" required="@(Field.Mandatory == true)" disabled="@(Field.Read_Only == true)" />
        }
        @* Date Time input *@
        else if (Field.FieldType == FieldType.DateTime)
        {
            <input type="datetime-local" class="form-control" @bind="DateValue" required="@(Field.Mandatory == true)" disabled="@(Field.Read_Only == true)" />
        }
        @* Fallback: text input *@
        else
        {
            <input type="text" class="form-control" @bind="CurrentValue" @bind:event="oninput" required="@(Field.Mandatory == true)" disabled="@(Field.Read_Only == true)" />
        }
    </div>
}

@code {
    // All logic moved to FieldInput.razor.cs partial class
}
