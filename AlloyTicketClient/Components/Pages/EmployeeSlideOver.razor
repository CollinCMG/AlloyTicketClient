@* Slide-over panel for employee actions (page-based) *@
@inject FormFieldService FormFieldService
@inject IJSRuntime JSRuntime
@using AlloyTicketClient.Components.Fields
@using AlloyTicketClient.Models
@using AlloyTicketClient.Enums
@using AlloyTicketClient.Services
@inject AlloyApiService AlloyApiService

@if (Show)
{
    <div class="slide-over-overlay" @onclick="HandleOverlayClick">
        <div class="slide-over-panel" @onclick:stopPropagation>
            <div class="slide-over-header">
                <h2>@Title</h2>
                <button class="slide-over-close" @onclick="HandleClose">&times;</button>
            </div>
            <div class="slide-over-content">
                @if (isLoading)
                {
                    <div class="modern-loading">
                        <div class="modern-spinner"></div>
                        <span>Loading, please wait...</span>
                    </div>
                }
                else if (pages != null && pages.Count > 0)
                {
                    var p = pages[currentPageIndex];
                    <div class="form-page">
                        <h3>@p.PageName</h3>
                        @foreach (var item in p.Items)
                        {
                            if (item is FieldInputDto fieldInput)
                            {
                                var fieldKey = fieldInput.FieldName;
                                <FieldInput @key="fieldInput.FieldName"
                                            Field="@(MapToFormFieldDto(fieldInput))"
                                            Value="@(fieldValues.ContainsKey(fieldKey) ? fieldValues[fieldKey]?.ToString() : null)"
                                            OnValueChanged="@(val => OnFieldValueChanged(val, fieldKey))" />
                            }
                            else if (item is FieldTextDto fieldText)
                            {
                                <div class="field-text">@GetTextValue(fieldText.ElementDefinition)</div>
                            }
                            else if (item is AttachmentInputDto attachment)
                            {
                                // Use a unique key for the attachment field
                                var attachmentKey = $"attachment_{currentPageIndex}_{p.Items.IndexOf(item)}";
                                <InputFile class="form-control" OnChange="e => OnAttachmentChanged(e, attachmentKey)" />
                                @if (fieldValues.ContainsKey(attachmentKey))
                                {
                                    <div class="mt-1 text-success" style="display: flex; align-items: center; gap: 0.5rem;">
                                        File selected: @(((IBrowserFile)fieldValues[attachmentKey]).Name)
                                        <button type="button" class="btn btn-sm btn-danger ms-2" @onclick="() => RemoveAttachment(attachmentKey)">Remove</button>
                                    </div>
                                }
                            }
                        }
                    </div>
                }
                else
                {
                    <p>No fields found for this form.</p>
                }
            </div>
            <div class="slide-over-footer" style="display: flex; justify-content: space-between; align-items: center; gap: 1rem;">
                @if (!isLoading && pages != null && pages.Count > 0)
                {
                    @if (!IsFirstPage)
                    {
                        <button class="btn btn-secondary" @onclick="GoBack" style="min-width: 100px;">Back</button>
                    }
                    <div style="margin-left: auto;">
                        @if (!IsLastPage)
                        {
                            <button class="btn btn-primary" @onclick="GoNext" style="min-width: 100px;" disabled="@(AreRequiredFieldsFilled() ? null : true)">Next</button>
                        }
                        else
                        {
                            <button class="btn btn-success @( (!AreRequiredFieldsFilled() || isSubmitting) ? "disabled-green" : null )"
                                    @onclick="SubmitForm"
                                    style="min-width: 100px; display: flex; align-items: center; justify-content: center; gap: 0.5rem;"
                                    disabled="@((!AreRequiredFieldsFilled() || isSubmitting) ? true : null)">
                                @if (isSubmitting)
                                {
                                    <span class="modern-spinner" style="width: 1.25rem; height: 1.25rem; border-width: 2.5px;"></span>
                                    <span>Submitting</span>
                                }
                                else
                                {
                                    <span>Submit</span>
                                }
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}
@if (showCancelConfirm)
{
    <div class="modal-overlay modal-center">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Cancel Action</h5>
                </div>
                <div class="modal-body">
                    Are you sure you want to cancel this action?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="ConfirmCancel">Yes</button>
                    <button class="btn btn-secondary" @onclick="CancelCancel">No</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? FormId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private bool isLoading = false;
    private List<PageDto>? pages;
    private int currentPageIndex = 0;
    private bool IsFirstPage => currentPageIndex == 0;
    private bool IsLastPage => pages == null || currentPageIndex == pages.Count - 1;
    private Dictionary<string, object?> fieldValues = new();
    private Guid? lastLoadedFormId = null;
    private bool isSubmitting = false;
    private bool showCancelConfirm = false;
    private bool closeSidebarOnConfirm = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Show && Guid.TryParse(FormId, out var formId))
        {
            // Clear field values when opening the sidebar
            fieldValues.Clear();
            // Only reload if FormId changes or Show is toggled
            if (lastLoadedFormId != formId || pages == null)
            {
                isLoading = true;
                pages = null;
                currentPageIndex = 0;
                pages = await FormFieldService.GetFormPagesAsync(formId);
                lastLoadedFormId = formId;
                isLoading = false;
                StateHasChanged();
            }
        }
        else if (!Show)
        {
            // Clear field values when closing the sidebar
            fieldValues.Clear();
            pages = null;
            isLoading = false;
            currentPageIndex = 0;
            lastLoadedFormId = null;
        }
    }

    private void GoBack()
    {
        if (currentPageIndex > 0)
            currentPageIndex--;
    }

    private void GoNext()
    {
        if (pages != null && currentPageIndex < pages.Count - 1)
            currentPageIndex++;
    }

    private async Task SubmitForm()
    {
        isSubmitting = true;
        StateHasChanged();
        try
        {
            await AlloyApiService.PostAsync(fieldValues);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    // Helper to map FieldInputDto to FormFieldDto for FieldInput component
    private FormFieldDto MapToFormFieldDto(FieldInputDto input)
    {
        return new FormFieldDto
        {
            Field_Num = input.Field_Num,
            Field_Label = input.FieldLabel,
            Field_Name = input.FieldName,
            ID = input.DefinitionID ?? Guid.Empty,
            Virtual = input.Virtual,
            Mandatory = input.Mandatory,
            Read_Only = input.Read_Only,
            LookupValues = input.Lookup_Values,
            TableName = input.Table_Name,
            LookupID = input.Lookup_ID,
            Filter = input.Filter,
            FieldType = input.FieldType,
            DisplayFields = input.DisplayFields
        };
    }

    private string GetTextValue(string? elementDefinition)
    {
        if (string.IsNullOrWhiteSpace(elementDefinition))
            return string.Empty;

        try
        {
            var doc = System.Xml.Linq.XDocument.Parse(elementDefinition);
            var item = doc.Descendants("ITEM")
                          .FirstOrDefault(e => (string?)e.Attribute("Name") == "Text");
            return item?.Attribute("Value")?.Value ?? string.Empty;
        }
        catch
        {
            // Fallback: strip tags if not valid XML
            return System.Text.RegularExpressions.Regex.Replace(elementDefinition, "<.*?>", string.Empty).Trim();
        }
    }

    private T? GetFieldValue<T>(string key)
    {
        if (fieldValues.TryGetValue(key, out var value) && value is T t)
            return t;
        return default;
    }

    private void SetFieldValue<T>(string key, T value)
    {
        fieldValues[key] = value;
    }

    private string GetOrSetFieldValue(string key)
    {
        return fieldValues.TryGetValue(key, out var value) ? value?.ToString() ?? string.Empty : string.Empty;
    }
    private void GetOrSetFieldValue(string key, string value)
    {
        fieldValues[key] = value;
    }

    private Task OnFieldValueChanged(string? value, string fieldKey)
    {
        fieldValues[fieldKey] = value;
        return Task.CompletedTask;
    }

    private async Task OnAttachmentChanged(InputFileChangeEventArgs e, string key)
    {
        if (e.FileCount > 0)
        {
            // Store the first file (can be extended for multiple files)
            var file = e.File;
            fieldValues[key] = file;
        }
        else
        {
            fieldValues.Remove(key);
        }
    }

    private void RemoveAttachment(string key)
    {
        if (fieldValues.ContainsKey(key))
        {
            fieldValues.Remove(key);
        }
    }

    // Returns true if all required (Mandatory) fields on the current page have a value
    private bool AreRequiredFieldsFilled()
    {
        if (pages == null || pages.Count == 0)
            return false;
        var page = pages[currentPageIndex];
        foreach (var item in page.Items)
        {
            if (item is FieldInputDto fieldInput && fieldInput.Mandatory == true)
            {
                var key = fieldInput.FieldName;
                if (!fieldValues.TryGetValue(key, out var value) || value == null || string.IsNullOrWhiteSpace(value.ToString()))
                {
                    return false;
                }
            }
        }
        return true;
    }

    private void HandleOverlayClick()
    {
        if (fieldValues.Count > 0)
        {
            showCancelConfirm = true;
            closeSidebarOnConfirm = true;
        }
        else
        {
            fieldValues.Clear(); // Clear on close
            OnClose.InvokeAsync();
        }
    }

    private void ConfirmCancel()
    {
        showCancelConfirm = false;
        if (closeSidebarOnConfirm)
        {
            fieldValues.Clear(); // Clear on close
            OnClose.InvokeAsync();
        }
    }

    private void CancelCancel()
    {
        showCancelConfirm = false;
        closeSidebarOnConfirm = false;
    }

    private async Task HandleClose()
    {
        if (fieldValues.Count > 0)
        {
            showCancelConfirm = true;
            closeSidebarOnConfirm = true;
        }
        else
        {
            fieldValues.Clear(); // Clear on close
            await OnClose.InvokeAsync();
        }
    }
}
